version: "3.8"

services:
  mongo:
    image: mongo:latest
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - uptime_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - uptime_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      MONGO_URL: ${MONGO_URL:-mongodb://mongo:27017/uptime_monitor}
      SECRET: ${SECRET:-your-development-secret}
      PORT: 3000
      EMAIL_SERVICE: ${EMAIL_SERVICE:-console}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@localhost}
      MONITORING_REGION: ${MONITORING_REGION:-us-east-1}
      MONITORING_CITY: ${MONITORING_CITY:-Local}
      MONITORING_COUNTRY: ${MONITORING_COUNTRY:-Development}
      MONITORING_LATITUDE: ${MONITORING_LATITUDE:-0}
      MONITORING_LONGITUDE: ${MONITORING_LONGITUDE:-0}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
    ports:
      - "3000:3000"
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - uptime_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - uptime_network

volumes:
  mongo_data:
  redis_data:

networks:
  uptime_network:
    driver: bridge
