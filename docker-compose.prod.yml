version: "3.8"

services:
  mongo:
    image: mongo:latest
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    networks:
      - uptime_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - uptime_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  backend:
    build:
      context: ./backend
      dockerfile: ./docker/backend/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGO_URL: ${MONGO_URL}
      SECRET: ${SECRET}
      PORT: 3000
      EMAIL_SERVICE: ${EMAIL_SERVICE}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      EMAIL_FROM: ${EMAIL_FROM}
      MONITORING_REGION: ${MONITORING_REGION}
      MONITORING_CITY: ${MONITORING_CITY}
      MONITORING_COUNTRY: ${MONITORING_COUNTRY}
      MONITORING_LATITUDE: ${MONITORING_LATITUDE}
      MONITORING_LONGITUDE: ${MONITORING_LONGITUDE}
      FRONTEND_URL: ${FRONTEND_URL}
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - uptime_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 2

  frontend:
    build:
      context: ./frontend
      dockerfile: ./docker/frontend/Dockerfile
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - uptime_network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - nginx_ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - uptime_network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  nginx_ssl:
    driver: local

networks:
  uptime_network:
    driver: bridge
